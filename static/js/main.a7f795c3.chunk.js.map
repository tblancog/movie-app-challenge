{"version":3,"sources":["components/SearchBar.tsx","components/MovieCard.tsx","components/MovieList.tsx","services/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SearchBar","items","handle","useState","query","setQuery","search","e","preventDefault","length","filter","item","overview","match","RegExp","className","type","placeholder","value","onChange","target","onKeyDown","key","onClick","MovieCard","movie","title","poster_path","src","alt","MovieList","map","id","fetchMovies","handleSetMovies","handleLoading","a","headers","Headers","process","fetch","resp","json","data","results","App","movies","setMovies","loading","setLoading","useEffect","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAgCeA,EAzBG,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,OAAqB,EACrBC,mBAAiB,IADI,mBACxCC,EADwC,KACjCC,EADiC,KAEzCC,EAAS,SAACC,GACdA,EAAEC,iBACEJ,EAAMK,OAAS,IACjBP,EAAOD,EAAMS,QAAO,SAAAC,GAAI,OAAIA,EAAKC,SAASC,MACxC,IAAIC,OAAOV,EAAO,WAEpBC,EAAS,MAGb,OACE,8BACE,sBAAKU,UAAU,kBAAf,UACE,uBAAOC,KAAK,OAAOC,YAAY,iBAC7BC,MAAOd,EACPe,SAAU,SAAAZ,GAAC,OAAIF,EAASE,EAAEa,OAAOF,QACjCG,UAAW,SAACd,GAAD,MAAiB,UAAVA,EAAEe,KAAmBhB,EAAOC,MAEhD,wBAAQgB,QAAS,SAAAhB,GAAC,OAAID,EAAOC,IAA7B,0BCNOiB,EAfG,SAAC,GAAyD,IAAD,IAAtDC,MAASC,EAA6C,EAA7CA,MAAOd,EAAsC,EAAtCA,SAAUe,EAA4B,EAA5BA,YAE7C,OACE,qBAAIZ,UAAU,OAAd,UACE,iCACE,qBAAKa,IAJM,mCAIUD,EAAaE,IAAKH,MAEzC,sBAAKX,UAAU,OAAf,UACE,6BAAKW,IACL,4BAAId,WCAGkB,EARG,SAAC,GAAuB,IAArB7B,EAAoB,EAApBA,MACnB,OACE,6BACGA,EAAM8B,KAAI,SAAApB,GAAI,OAAK,cAAC,EAAD,CAAyBc,MAAOd,GAAhBA,EAAKqB,U,uBCPhC,SAAeC,EAA9B,oC,4CAAe,WACbC,EACAC,GAFa,mBAAAC,EAAA,6DAIbD,GAAc,GACRE,EAAU,IAAIC,QAAQ,CAC1B,eAAgB,iCAChB,cAAgB,UAAhB,OAA2BC,yNAPhB,SASMC,MAAM,sCAAuC,CAAEH,YATrD,cASPI,EATO,gBAUMA,EAAKC,OAVX,OAUPC,EAVO,OAWbT,EAAgBS,EAAKC,SACrBT,GAAc,GAZD,6C,4BC2BAU,MAvBf,WAAgB,IAAD,EACe1C,mBAAuB,IADtC,mBACN2C,EADM,KACEC,EADF,OAEiB5C,oBAAkB,GAFnC,mBAEN6C,EAFM,KAEGC,EAFH,KAMb,OAHAC,qBAAU,WACRjB,EAAYc,EAAWE,KACtB,IAED,sBAAKlC,UAAU,YAAf,UACE,iCACE,cAAC,EAAD,CAAWd,MAAO6C,EAChB5C,OAAQ6C,MAEZ,iCACGC,GAAY,6CACXA,GAA6B,IAAlBF,EAAOrC,QAAiB,4DACnC,mBAAG0C,KAAK,IAAI5B,QAAS,kBAAMU,EAAYc,EAAWE,IAAlD,8BAEF,cAAC,EAAD,CAAWhD,MAAO6C,WCTXM,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a7f795c3.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Movie } from '../types/Movie';\ninterface IProps {\n  items: Array<Movie>,\n  handle: Function\n};\n\nconst SearchBar = ({ items, handle }: IProps) => {\n  const [query, setQuery] = useState<string>('');\n  const search = (e: React.SyntheticEvent) => {\n    e.preventDefault();\n    if (query.length > 0) {\n      handle(items.filter(item => item.overview.match(\n        new RegExp(query, 'ig')\n      )));\n      setQuery('')\n    }\n  }\n  return (\n    <div>\n      <div className=\"searchContainer\">\n        <input type=\"text\" placeholder=\"Enter keywords\"\n          value={query}\n          onChange={e => setQuery(e.target.value)}\n          onKeyDown={(e) => e.key === 'Enter' && search(e)}\n        />\n        <button onClick={e => search(e)}>Search</button>\n      </div>\n    </div>\n  )\n}\n\nexport default SearchBar\n","import React from 'react'\nimport { Movie } from '../types/Movie';\ninterface IProps {\n  movie: Movie\n}\nconst MovieCard = ({ movie: { title, overview, poster_path } }: IProps) => {\n  const basePath = 'https://image.tmdb.org/t/p/w500/';\n  return (\n    <li className=\"card\">\n      <figure>\n        <img src={basePath + poster_path} alt={title} />\n      </figure>\n      <div className=\"info\">\n        <h2>{title}</h2>\n        <p>{overview}</p>\n      </div>\n    </li>\n  )\n}\n\nexport default MovieCard\n","import React from 'react';\nimport MovieCard from './MovieCard';\nimport { Movie } from '../types/Movie';\ninterface IProps {\n  items: Array<Movie>\n}\nconst MovieList = ({ items }: IProps) => {\n  return (\n    <ul>\n      {items.map(item => (<MovieCard key={item.id} movie={item} />))}\n    </ul>\n  )\n}\n\nexport default MovieList\n","import { Movie } from '../types/Movie';\n\nexport default async function fetchMovies(\n  handleSetMovies: React.Dispatch<React.SetStateAction<Movie[]>>,\n  handleLoading: React.Dispatch<React.SetStateAction<Boolean>>\n) {\n  handleLoading(true)\n  const headers = new Headers({\n    'Content-Type': 'application/json;charset=utf-8',\n    'Authorization': `Bearer ${process.env.REACT_APP_ACCESS_TOKEN}`\n  });\n  const resp = await fetch('https://api.themoviedb.org/4/list/1', { headers });\n  const data = await resp.json();\n  handleSetMovies(data.results);\n  handleLoading(false)\n}","import React, { useState, useEffect } from 'react';\nimport SearchBar from './components/SearchBar';\nimport MovieList from './components/MovieList';\nimport { Movie } from './types/Movie';\nimport fetchMovies from './services/';\nimport './App.css';\nfunction App() {\n  const [movies, setMovies] = useState<Array<Movie>>([]);\n  const [loading, setLoading] = useState<Boolean>(false);\n  useEffect(() => {\n    fetchMovies(setMovies, setLoading);\n  }, []);\n  return (\n    <div className=\"container\">\n      <header>\n        <SearchBar items={movies}\n          handle={setMovies} />\n      </header>\n      <main>\n        {loading && (<h3>Loading...</h3>)}\n        {!loading && movies.length === 0 && (<h3>No matches for this search\n          <a href=\"/\" onClick={() => fetchMovies(setMovies, setLoading)}> Clear search</a>\n        </h3>)}\n        <MovieList items={movies} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}